# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _StopPow
else:
    import _StopPow

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def new_intp():
    return _StopPow.new_intp()

def copy_intp(value):
    return _StopPow.copy_intp(value)

def delete_intp(obj):
    return _StopPow.delete_intp(obj)

def intp_assign(obj, value):
    return _StopPow.intp_assign(obj, value)

def intp_value(obj):
    return _StopPow.intp_value(obj)

def new_floatp():
    return _StopPow.new_floatp()

def copy_floatp(value):
    return _StopPow.copy_floatp(value)

def delete_floatp(obj):
    return _StopPow.delete_floatp(obj)

def floatp_assign(obj, value):
    return _StopPow.floatp_assign(obj, value)

def floatp_value(obj):
    return _StopPow.floatp_value(obj)

def new_doublep():
    return _StopPow.new_doublep()

def copy_doublep(value):
    return _StopPow.copy_doublep(value)

def delete_doublep(obj):
    return _StopPow.delete_doublep(obj)

def doublep_assign(obj, value):
    return _StopPow.doublep_assign(obj, value)

def doublep_value(obj):
    return _StopPow.doublep_value(obj)
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _StopPow.delete_SwigPyIterator

    def value(self):
        return _StopPow.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _StopPow.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _StopPow.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _StopPow.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _StopPow.SwigPyIterator_equal(self, x)

    def copy(self):
        return _StopPow.SwigPyIterator_copy(self)

    def next(self):
        return _StopPow.SwigPyIterator_next(self)

    def __next__(self):
        return _StopPow.SwigPyIterator___next__(self)

    def previous(self):
        return _StopPow.SwigPyIterator_previous(self)

    def advance(self, n):
        return _StopPow.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _StopPow.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _StopPow.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _StopPow.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _StopPow.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _StopPow.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _StopPow.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _StopPow:
_StopPow.SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _StopPow.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _StopPow.IntVector___nonzero__(self)

    def __bool__(self):
        return _StopPow.IntVector___bool__(self)

    def __len__(self):
        return _StopPow.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _StopPow.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _StopPow.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _StopPow.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _StopPow.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _StopPow.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _StopPow.IntVector___setitem__(self, *args)

    def pop(self):
        return _StopPow.IntVector_pop(self)

    def append(self, x):
        return _StopPow.IntVector_append(self, x)

    def empty(self):
        return _StopPow.IntVector_empty(self)

    def size(self):
        return _StopPow.IntVector_size(self)

    def swap(self, v):
        return _StopPow.IntVector_swap(self, v)

    def begin(self):
        return _StopPow.IntVector_begin(self)

    def end(self):
        return _StopPow.IntVector_end(self)

    def rbegin(self):
        return _StopPow.IntVector_rbegin(self)

    def rend(self):
        return _StopPow.IntVector_rend(self)

    def clear(self):
        return _StopPow.IntVector_clear(self)

    def get_allocator(self):
        return _StopPow.IntVector_get_allocator(self)

    def pop_back(self):
        return _StopPow.IntVector_pop_back(self)

    def erase(self, *args):
        return _StopPow.IntVector_erase(self, *args)

    def __init__(self, *args):
        _StopPow.IntVector_swiginit(self, _StopPow.new_IntVector(*args))

    def push_back(self, x):
        return _StopPow.IntVector_push_back(self, x)

    def front(self):
        return _StopPow.IntVector_front(self)

    def back(self):
        return _StopPow.IntVector_back(self)

    def assign(self, n, x):
        return _StopPow.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _StopPow.IntVector_resize(self, *args)

    def insert(self, *args):
        return _StopPow.IntVector_insert(self, *args)

    def reserve(self, n):
        return _StopPow.IntVector_reserve(self, n)

    def capacity(self):
        return _StopPow.IntVector_capacity(self)
    __swig_destroy__ = _StopPow.delete_IntVector

# Register IntVector in _StopPow:
_StopPow.IntVector_swigregister(IntVector)

class FloatVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _StopPow.FloatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _StopPow.FloatVector___nonzero__(self)

    def __bool__(self):
        return _StopPow.FloatVector___bool__(self)

    def __len__(self):
        return _StopPow.FloatVector___len__(self)

    def __getslice__(self, i, j):
        return _StopPow.FloatVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _StopPow.FloatVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _StopPow.FloatVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _StopPow.FloatVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _StopPow.FloatVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _StopPow.FloatVector___setitem__(self, *args)

    def pop(self):
        return _StopPow.FloatVector_pop(self)

    def append(self, x):
        return _StopPow.FloatVector_append(self, x)

    def empty(self):
        return _StopPow.FloatVector_empty(self)

    def size(self):
        return _StopPow.FloatVector_size(self)

    def swap(self, v):
        return _StopPow.FloatVector_swap(self, v)

    def begin(self):
        return _StopPow.FloatVector_begin(self)

    def end(self):
        return _StopPow.FloatVector_end(self)

    def rbegin(self):
        return _StopPow.FloatVector_rbegin(self)

    def rend(self):
        return _StopPow.FloatVector_rend(self)

    def clear(self):
        return _StopPow.FloatVector_clear(self)

    def get_allocator(self):
        return _StopPow.FloatVector_get_allocator(self)

    def pop_back(self):
        return _StopPow.FloatVector_pop_back(self)

    def erase(self, *args):
        return _StopPow.FloatVector_erase(self, *args)

    def __init__(self, *args):
        _StopPow.FloatVector_swiginit(self, _StopPow.new_FloatVector(*args))

    def push_back(self, x):
        return _StopPow.FloatVector_push_back(self, x)

    def front(self):
        return _StopPow.FloatVector_front(self)

    def back(self):
        return _StopPow.FloatVector_back(self)

    def assign(self, n, x):
        return _StopPow.FloatVector_assign(self, n, x)

    def resize(self, *args):
        return _StopPow.FloatVector_resize(self, *args)

    def insert(self, *args):
        return _StopPow.FloatVector_insert(self, *args)

    def reserve(self, n):
        return _StopPow.FloatVector_reserve(self, n)

    def capacity(self):
        return _StopPow.FloatVector_capacity(self)
    __swig_destroy__ = _StopPow.delete_FloatVector

# Register FloatVector in _StopPow:
_StopPow.FloatVector_swigregister(FloatVector)

class FloatVector2D(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _StopPow.FloatVector2D_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _StopPow.FloatVector2D___nonzero__(self)

    def __bool__(self):
        return _StopPow.FloatVector2D___bool__(self)

    def __len__(self):
        return _StopPow.FloatVector2D___len__(self)

    def __getslice__(self, i, j):
        return _StopPow.FloatVector2D___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _StopPow.FloatVector2D___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _StopPow.FloatVector2D___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _StopPow.FloatVector2D___delitem__(self, *args)

    def __getitem__(self, *args):
        return _StopPow.FloatVector2D___getitem__(self, *args)

    def __setitem__(self, *args):
        return _StopPow.FloatVector2D___setitem__(self, *args)

    def pop(self):
        return _StopPow.FloatVector2D_pop(self)

    def append(self, x):
        return _StopPow.FloatVector2D_append(self, x)

    def empty(self):
        return _StopPow.FloatVector2D_empty(self)

    def size(self):
        return _StopPow.FloatVector2D_size(self)

    def swap(self, v):
        return _StopPow.FloatVector2D_swap(self, v)

    def begin(self):
        return _StopPow.FloatVector2D_begin(self)

    def end(self):
        return _StopPow.FloatVector2D_end(self)

    def rbegin(self):
        return _StopPow.FloatVector2D_rbegin(self)

    def rend(self):
        return _StopPow.FloatVector2D_rend(self)

    def clear(self):
        return _StopPow.FloatVector2D_clear(self)

    def get_allocator(self):
        return _StopPow.FloatVector2D_get_allocator(self)

    def pop_back(self):
        return _StopPow.FloatVector2D_pop_back(self)

    def erase(self, *args):
        return _StopPow.FloatVector2D_erase(self, *args)

    def __init__(self, *args):
        _StopPow.FloatVector2D_swiginit(self, _StopPow.new_FloatVector2D(*args))

    def push_back(self, x):
        return _StopPow.FloatVector2D_push_back(self, x)

    def front(self):
        return _StopPow.FloatVector2D_front(self)

    def back(self):
        return _StopPow.FloatVector2D_back(self)

    def assign(self, n, x):
        return _StopPow.FloatVector2D_assign(self, n, x)

    def resize(self, *args):
        return _StopPow.FloatVector2D_resize(self, *args)

    def insert(self, *args):
        return _StopPow.FloatVector2D_insert(self, *args)

    def reserve(self, n):
        return _StopPow.FloatVector2D_reserve(self, n)

    def capacity(self):
        return _StopPow.FloatVector2D_capacity(self)
    __swig_destroy__ = _StopPow.delete_FloatVector2D

# Register FloatVector2D in _StopPow:
_StopPow.FloatVector2D_swigregister(FloatVector2D)

class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _StopPow.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _StopPow.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _StopPow.DoubleVector___bool__(self)

    def __len__(self):
        return _StopPow.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _StopPow.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _StopPow.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _StopPow.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _StopPow.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _StopPow.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _StopPow.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _StopPow.DoubleVector_pop(self)

    def append(self, x):
        return _StopPow.DoubleVector_append(self, x)

    def empty(self):
        return _StopPow.DoubleVector_empty(self)

    def size(self):
        return _StopPow.DoubleVector_size(self)

    def swap(self, v):
        return _StopPow.DoubleVector_swap(self, v)

    def begin(self):
        return _StopPow.DoubleVector_begin(self)

    def end(self):
        return _StopPow.DoubleVector_end(self)

    def rbegin(self):
        return _StopPow.DoubleVector_rbegin(self)

    def rend(self):
        return _StopPow.DoubleVector_rend(self)

    def clear(self):
        return _StopPow.DoubleVector_clear(self)

    def get_allocator(self):
        return _StopPow.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _StopPow.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _StopPow.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _StopPow.DoubleVector_swiginit(self, _StopPow.new_DoubleVector(*args))

    def push_back(self, x):
        return _StopPow.DoubleVector_push_back(self, x)

    def front(self):
        return _StopPow.DoubleVector_front(self)

    def back(self):
        return _StopPow.DoubleVector_back(self)

    def assign(self, n, x):
        return _StopPow.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _StopPow.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _StopPow.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _StopPow.DoubleVector_reserve(self, n)

    def capacity(self):
        return _StopPow.DoubleVector_capacity(self)
    __swig_destroy__ = _StopPow.delete_DoubleVector

# Register DoubleVector in _StopPow:
_StopPow.DoubleVector_swigregister(DoubleVector)

class DoubleVector2D(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _StopPow.DoubleVector2D_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _StopPow.DoubleVector2D___nonzero__(self)

    def __bool__(self):
        return _StopPow.DoubleVector2D___bool__(self)

    def __len__(self):
        return _StopPow.DoubleVector2D___len__(self)

    def __getslice__(self, i, j):
        return _StopPow.DoubleVector2D___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _StopPow.DoubleVector2D___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _StopPow.DoubleVector2D___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _StopPow.DoubleVector2D___delitem__(self, *args)

    def __getitem__(self, *args):
        return _StopPow.DoubleVector2D___getitem__(self, *args)

    def __setitem__(self, *args):
        return _StopPow.DoubleVector2D___setitem__(self, *args)

    def pop(self):
        return _StopPow.DoubleVector2D_pop(self)

    def append(self, x):
        return _StopPow.DoubleVector2D_append(self, x)

    def empty(self):
        return _StopPow.DoubleVector2D_empty(self)

    def size(self):
        return _StopPow.DoubleVector2D_size(self)

    def swap(self, v):
        return _StopPow.DoubleVector2D_swap(self, v)

    def begin(self):
        return _StopPow.DoubleVector2D_begin(self)

    def end(self):
        return _StopPow.DoubleVector2D_end(self)

    def rbegin(self):
        return _StopPow.DoubleVector2D_rbegin(self)

    def rend(self):
        return _StopPow.DoubleVector2D_rend(self)

    def clear(self):
        return _StopPow.DoubleVector2D_clear(self)

    def get_allocator(self):
        return _StopPow.DoubleVector2D_get_allocator(self)

    def pop_back(self):
        return _StopPow.DoubleVector2D_pop_back(self)

    def erase(self, *args):
        return _StopPow.DoubleVector2D_erase(self, *args)

    def __init__(self, *args):
        _StopPow.DoubleVector2D_swiginit(self, _StopPow.new_DoubleVector2D(*args))

    def push_back(self, x):
        return _StopPow.DoubleVector2D_push_back(self, x)

    def front(self):
        return _StopPow.DoubleVector2D_front(self)

    def back(self):
        return _StopPow.DoubleVector2D_back(self)

    def assign(self, n, x):
        return _StopPow.DoubleVector2D_assign(self, n, x)

    def resize(self, *args):
        return _StopPow.DoubleVector2D_resize(self, *args)

    def insert(self, *args):
        return _StopPow.DoubleVector2D_insert(self, *args)

    def reserve(self, n):
        return _StopPow.DoubleVector2D_reserve(self, n)

    def capacity(self):
        return _StopPow.DoubleVector2D_capacity(self)
    __swig_destroy__ = _StopPow.delete_DoubleVector2D

# Register DoubleVector2D in _StopPow:
_StopPow.DoubleVector2D_swigregister(DoubleVector2D)

class StopPow(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def dEdx_MeV_um(self, E):
        return _StopPow.StopPow_dEdx_MeV_um(self, E)

    def dEdx_MeV_mgcm2(self, E):
        return _StopPow.StopPow_dEdx_MeV_mgcm2(self, E)

    def get_Emin(self):
        return _StopPow.StopPow_get_Emin(self)

    def get_Emax(self):
        return _StopPow.StopPow_get_Emax(self)

    def get_type(self):
        return _StopPow.StopPow_get_type(self)

    def get_info(self):
        return _StopPow.StopPow_get_info(self)

    def dEdx(self, E):
        return _StopPow.StopPow_dEdx(self, E)

    def Eout(self, E, x):
        return _StopPow.StopPow_Eout(self, E, x)

    def Ein(self, E, x):
        return _StopPow.StopPow_Ein(self, E, x)

    def Thickness(self, E1, E2):
        return _StopPow.StopPow_Thickness(self, E1, E2)

    def Range(self, E):
        return _StopPow.StopPow_Range(self, E)

    def get_mode(self):
        return _StopPow.StopPow_get_mode(self)

    def set_mode(self, new_mode):
        return _StopPow.StopPow_set_mode(self, new_mode)
    __swig_destroy__ = _StopPow.delete_StopPow

# Register StopPow in _StopPow:
_StopPow.StopPow_swigregister(StopPow)
cvar = _StopPow.cvar
StopPow.MODE_LENGTH = _StopPow.cvar.StopPow_MODE_LENGTH
StopPow.MODE_RHOR = _StopPow.cvar.StopPow_MODE_RHOR

class StopPow_Plasma(StopPow):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _StopPow.delete_StopPow_Plasma

    def dEdx_field(self, E, i):
        return _StopPow.StopPow_Plasma_dEdx_field(self, E, i)

    def dEdx_plasma_electrons(self, E):
        return _StopPow.StopPow_Plasma_dEdx_plasma_electrons(self, E)

    def dEdx_plasma_ions(self, E):
        return _StopPow.StopPow_Plasma_dEdx_plasma_ions(self, E)

    def set_particle(self, mt, Zt):
        return _StopPow.StopPow_Plasma_set_particle(self, mt, Zt)

    def set_field(self, *args):
        return _StopPow.StopPow_Plasma_set_field(self, *args)

    def on_field_change(self):
        return _StopPow.StopPow_Plasma_on_field_change(self)

# Register StopPow_Plasma in _StopPow:
_StopPow.StopPow_Plasma_swigregister(StopPow_Plasma)

class StopPow_PartialIoniz(StopPow):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _StopPow.delete_StopPow_PartialIoniz

    def set_particle(self, mt, Zt):
        return _StopPow.StopPow_PartialIoniz_set_particle(self, mt, Zt)

    def set_field(self, *args):
        return _StopPow.StopPow_PartialIoniz_set_field(self, *args)

# Register StopPow_PartialIoniz in _StopPow:
_StopPow.StopPow_PartialIoniz_swigregister(StopPow_PartialIoniz)

class StopPow_SRIM(StopPow):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fname):
        _StopPow.StopPow_SRIM_swiginit(self, _StopPow.new_StopPow_SRIM(fname))
    __swig_destroy__ = _StopPow.delete_StopPow_SRIM

    def dEdx_MeV_um(self, E):
        return _StopPow.StopPow_SRIM_dEdx_MeV_um(self, E)

    def dEdx_MeV_mgcm2(self, E):
        return _StopPow.StopPow_SRIM_dEdx_MeV_mgcm2(self, E)

    def get_Emin(self):
        return _StopPow.StopPow_SRIM_get_Emin(self)

    def get_Emax(self):
        return _StopPow.StopPow_SRIM_get_Emax(self)

# Register StopPow_SRIM in _StopPow:
_StopPow.StopPow_SRIM_swigregister(StopPow_SRIM)

class StopPow_LP(StopPow_Plasma):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StopPow.StopPow_LP_swiginit(self, _StopPow.new_StopPow_LP(*args))
    __swig_destroy__ = _StopPow.delete_StopPow_LP

    def dEdx_MeV_um(self, E):
        return _StopPow.StopPow_LP_dEdx_MeV_um(self, E)

    def dEdx_MeV_mgcm2(self, E):
        return _StopPow.StopPow_LP_dEdx_MeV_mgcm2(self, E)

    def dEdx_field(self, E, i):
        return _StopPow.StopPow_LP_dEdx_field(self, E, i)

    def set_collective(self, set):
        return _StopPow.StopPow_LP_set_collective(self, set)

    def set_quantum(self, set):
        return _StopPow.StopPow_LP_set_quantum(self, set)

    def set_xtf_factor(self, a):
        return _StopPow.StopPow_LP_set_xtf_factor(self, a)

    def set_xtf_collective_factor(self, a):
        return _StopPow.StopPow_LP_set_xtf_collective_factor(self, a)

    def set_u_factor(self, a):
        return _StopPow.StopPow_LP_set_u_factor(self, a)

    def use_published_collective(self, p):
        return _StopPow.StopPow_LP_use_published_collective(self, p)

    def use_classical_LogL(self, p):
        return _StopPow.StopPow_LP_use_classical_LogL(self, p)

    def get_Emin(self):
        return _StopPow.StopPow_LP_get_Emin(self)

    def get_Emax(self):
        return _StopPow.StopPow_LP_get_Emax(self)

# Register StopPow_LP in _StopPow:
_StopPow.StopPow_LP_swigregister(StopPow_LP)

class StopPow_BetheBloch(StopPow):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mt, Zt, mf, Zf, nf):
        _StopPow.StopPow_BetheBloch_swiginit(self, _StopPow.new_StopPow_BetheBloch(mt, Zt, mf, Zf, nf))
    __swig_destroy__ = _StopPow.delete_StopPow_BetheBloch

    def dEdx_MeV_um(self, E):
        return _StopPow.StopPow_BetheBloch_dEdx_MeV_um(self, E)

    def dEdx_MeV_mgcm2(self, E):
        return _StopPow.StopPow_BetheBloch_dEdx_MeV_mgcm2(self, E)

    def get_Emin(self):
        return _StopPow.StopPow_BetheBloch_get_Emin(self)

    def get_Emax(self):
        return _StopPow.StopPow_BetheBloch_get_Emax(self)

    def use_shell_correction(self, enabled):
        return _StopPow.StopPow_BetheBloch_use_shell_correction(self, enabled)

    def using_shell_correction(self):
        return _StopPow.StopPow_BetheBloch_using_shell_correction(self)

    def set_Ibar(self, Ibar):
        return _StopPow.StopPow_BetheBloch_set_Ibar(self, Ibar)

    def Ibar(self, Zf):
        return _StopPow.StopPow_BetheBloch_Ibar(self, Zf)

# Register StopPow_BetheBloch in _StopPow:
_StopPow.StopPow_BetheBloch_swigregister(StopPow_BetheBloch)

class StopPow_AZ(StopPow):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StopPow.StopPow_AZ_swiginit(self, _StopPow.new_StopPow_AZ(*args))
    __swig_destroy__ = _StopPow.delete_StopPow_AZ

    def dEdx_MeV_um(self, E):
        return _StopPow.StopPow_AZ_dEdx_MeV_um(self, E)

    def dEdx_MeV_mgcm2(self, E):
        return _StopPow.StopPow_AZ_dEdx_MeV_mgcm2(self, E)

    def get_Emin(self):
        return _StopPow.StopPow_AZ_get_Emin(self)

    def get_Emax(self):
        return _StopPow.StopPow_AZ_get_Emax(self)

# Register StopPow_AZ in _StopPow:
_StopPow.StopPow_AZ_swigregister(StopPow_AZ)

class StopPow_Mehlhorn(StopPow_PartialIoniz):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StopPow.StopPow_Mehlhorn_swiginit(self, _StopPow.new_StopPow_Mehlhorn(*args))
    __swig_destroy__ = _StopPow.delete_StopPow_Mehlhorn

    def dEdx_MeV_um(self, E):
        return _StopPow.StopPow_Mehlhorn_dEdx_MeV_um(self, E)

    def dEdx_MeV_mgcm2(self, E):
        return _StopPow.StopPow_Mehlhorn_dEdx_MeV_mgcm2(self, E)

    def get_Emin(self):
        return _StopPow.StopPow_Mehlhorn_get_Emin(self)

    def get_Emax(self):
        return _StopPow.StopPow_Mehlhorn_get_Emax(self)

    def Ibar(self, E, index):
        return _StopPow.StopPow_Mehlhorn_Ibar(self, E, index)

    def set_Ibar(self, Ibar):
        return _StopPow.StopPow_Mehlhorn_set_Ibar(self, Ibar)

# Register StopPow_Mehlhorn in _StopPow:
_StopPow.StopPow_Mehlhorn_swigregister(StopPow_Mehlhorn)

class StopPow_Grabowski(StopPow_Plasma):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StopPow.StopPow_Grabowski_swiginit(self, _StopPow.new_StopPow_Grabowski(*args))
    __swig_destroy__ = _StopPow.delete_StopPow_Grabowski

    def dEdx_MeV_um(self, E):
        return _StopPow.StopPow_Grabowski_dEdx_MeV_um(self, E)

    def dEdx_MeV_mgcm2(self, E):
        return _StopPow.StopPow_Grabowski_dEdx_MeV_mgcm2(self, E)

    def dEdx_field(self, E, i):
        return _StopPow.StopPow_Grabowski_dEdx_field(self, E, i)

    def get_Emin(self):
        return _StopPow.StopPow_Grabowski_get_Emin(self)

    def get_Emax(self):
        return _StopPow.StopPow_Grabowski_get_Emax(self)

# Register StopPow_Grabowski in _StopPow:
_StopPow.StopPow_Grabowski_swigregister(StopPow_Grabowski)

class StopPow_Zimmerman(StopPow_PartialIoniz):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StopPow.StopPow_Zimmerman_swiginit(self, _StopPow.new_StopPow_Zimmerman(*args))
    __swig_destroy__ = _StopPow.delete_StopPow_Zimmerman

    def dEdx_MeV_um(self, E):
        return _StopPow.StopPow_Zimmerman_dEdx_MeV_um(self, E)

    def dEdx_MeV_mgcm2(self, E):
        return _StopPow.StopPow_Zimmerman_dEdx_MeV_mgcm2(self, E)

    def get_Emin(self):
        return _StopPow.StopPow_Zimmerman_get_Emin(self)

    def get_Emax(self):
        return _StopPow.StopPow_Zimmerman_get_Emax(self)

    def dEdx_free_electron(self, E):
        return _StopPow.StopPow_Zimmerman_dEdx_free_electron(self, E)

    def dEdx_bound_electron(self, E):
        return _StopPow.StopPow_Zimmerman_dEdx_bound_electron(self, E)

    def dEdx_ion(self, E):
        return _StopPow.StopPow_Zimmerman_dEdx_ion(self, E)

    def set_quantum(self, set):
        return _StopPow.StopPow_Zimmerman_set_quantum(self, set)

# Register StopPow_Zimmerman in _StopPow:
_StopPow.StopPow_Zimmerman_swigregister(StopPow_Zimmerman)

class StopPow_BPS(StopPow_Plasma):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StopPow.StopPow_BPS_swiginit(self, _StopPow.new_StopPow_BPS(*args))
    __swig_destroy__ = _StopPow.delete_StopPow_BPS

    def dEdx_MeV_um(self, E):
        return _StopPow.StopPow_BPS_dEdx_MeV_um(self, E)

    def dEdx_MeV_mgcm2(self, E):
        return _StopPow.StopPow_BPS_dEdx_MeV_mgcm2(self, E)

    def dEdx_field(self, E, i):
        return _StopPow.StopPow_BPS_dEdx_field(self, E, i)

    def dEdx_short(self, *args):
        return _StopPow.StopPow_BPS_dEdx_short(self, *args)

    def dEdx_long(self, *args):
        return _StopPow.StopPow_BPS_dEdx_long(self, *args)

    def dEdx_quantum(self, *args):
        return _StopPow.StopPow_BPS_dEdx_quantum(self, *args)

    def get_Emin(self):
        return _StopPow.StopPow_BPS_get_Emin(self)

    def get_Emax(self):
        return _StopPow.StopPow_BPS_get_Emax(self)

    def Fc_real(self, u):
        return _StopPow.StopPow_BPS_Fc_real(self, u)

    def Fc_imag(self, u):
        return _StopPow.StopPow_BPS_Fc_imag(self, u)

# Register StopPow_BPS in _StopPow:
_StopPow.StopPow_BPS_swigregister(StopPow_BPS)

class StopPow_Fit(StopPow_PartialIoniz):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StopPow.StopPow_Fit_swiginit(self, _StopPow.new_StopPow_Fit(*args))
    __swig_destroy__ = _StopPow.delete_StopPow_Fit

    def dEdx_MeV_um(self, E):
        return _StopPow.StopPow_Fit_dEdx_MeV_um(self, E)

    def dEdx_MeV_mgcm2(self, E):
        return _StopPow.StopPow_Fit_dEdx_MeV_mgcm2(self, E)

    def get_Emin(self):
        return _StopPow.StopPow_Fit_get_Emin(self)

    def get_Emax(self):
        return _StopPow.StopPow_Fit_get_Emax(self)

    def normalize_bound_e(self, ref, Ep):
        return _StopPow.StopPow_Fit_normalize_bound_e(self, ref, Ep)

    def choose_model(self, new_model):
        return _StopPow.StopPow_Fit_choose_model(self, new_model)

    def set_factor(self, factor):
        return _StopPow.StopPow_Fit_set_factor(self, factor)

    def get_factor(self):
        return _StopPow.StopPow_Fit_get_factor(self)

# Register StopPow_Fit in _StopPow:
_StopPow.StopPow_Fit_swigregister(StopPow_Fit)
StopPow_Fit.MODE_ZIMMERMAN = _StopPow.cvar.StopPow_Fit_MODE_ZIMMERMAN
StopPow_Fit.MODE_LP = _StopPow.cvar.StopPow_Fit_MODE_LP
StopPow_Fit.MODE_LP_PUB = _StopPow.cvar.StopPow_Fit_MODE_LP_PUB
StopPow_Fit.MODE_BPS = _StopPow.cvar.StopPow_Fit_MODE_BPS
StopPow_Fit.MODE_GRABOWSKI = _StopPow.cvar.StopPow_Fit_MODE_GRABOWSKI
StopPow_Fit.MODE_QUANTUM_GRABOWSKI = _StopPow.cvar.StopPow_Fit_MODE_QUANTUM_GRABOWSKI

class AtomicData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def get_AMU(Z):
        return _StopPow.AtomicData_get_AMU(Z)

    @staticmethod
    def get_rho(Z):
        return _StopPow.AtomicData_get_rho(Z)

    @staticmethod
    def get_symbol(Z):
        return _StopPow.AtomicData_get_symbol(Z)

    @staticmethod
    def get_num_from_symbol(symbol):
        return _StopPow.AtomicData_get_num_from_symbol(symbol)

    @staticmethod
    def get_name(Z):
        return _StopPow.AtomicData_get_name(Z)

    @staticmethod
    def get_num_from_name(name):
        return _StopPow.AtomicData_get_num_from_name(name)

    @staticmethod
    def get_mean_ionization(Z):
        return _StopPow.AtomicData_get_mean_ionization(Z)

    @staticmethod
    def get_shell_coeff(Z):
        return _StopPow.AtomicData_get_shell_coeff(Z)
    n = _StopPow.AtomicData_n

    def __init__(self):
        _StopPow.AtomicData_swiginit(self, _StopPow.new_AtomicData())
    __swig_destroy__ = _StopPow.delete_AtomicData

# Register AtomicData in _StopPow:
_StopPow.AtomicData_swigregister(AtomicData)

def AtomicData_get_AMU(Z):
    return _StopPow.AtomicData_get_AMU(Z)

def AtomicData_get_rho(Z):
    return _StopPow.AtomicData_get_rho(Z)

def AtomicData_get_symbol(Z):
    return _StopPow.AtomicData_get_symbol(Z)

def AtomicData_get_num_from_symbol(symbol):
    return _StopPow.AtomicData_get_num_from_symbol(symbol)

def AtomicData_get_name(Z):
    return _StopPow.AtomicData_get_name(Z)

def AtomicData_get_num_from_name(name):
    return _StopPow.AtomicData_get_num_from_name(name)

def AtomicData_get_mean_ionization(Z):
    return _StopPow.AtomicData_get_mean_ionization(Z)

def AtomicData_get_shell_coeff(Z):
    return _StopPow.AtomicData_get_shell_coeff(Z)


def get_dEdx_vs_E(*args):
    return _StopPow.get_dEdx_vs_E(*args)

def get_Range_vs_E(*args):
    return _StopPow.get_Range_vs_E(*args)

def get_Eout_vs_Ein(*args):
    return _StopPow.get_Eout_vs_Ein(*args)

def get_Eout_vs_Thickness(*args):
    return _StopPow.get_Eout_vs_Thickness(*args)

def get_Ein_vs_Eout(*args):
    return _StopPow.get_Ein_vs_Eout(*args)

def get_Ein_vs_Thickness(*args):
    return _StopPow.get_Ein_vs_Thickness(*args)

def get_Thickness_vs_Eout(*args):
    return _StopPow.get_Thickness_vs_Eout(*args)

def get_Thickness_vs_Ein(*args):
    return _StopPow.get_Thickness_vs_Ein(*args)

def shift(*args):
    return _StopPow.shift(*args)

def fit_Gaussian(data_x, data_y, data_std, fit, fit_unc, chi2_dof, verbose):
    return _StopPow.fit_Gaussian(data_x, data_y, data_std, fit, fit_unc, chi2_dof, verbose)

def fit_rhoR(data_x, data_y, data_std, dE, fit, fit_unc, chi2_dof, s, E0, E0_unc, rhoR, rhoR_unc, verbose):
    return _StopPow.fit_rhoR(data_x, data_y, data_std, dE, fit, fit_unc, chi2_dof, s, E0, E0_unc, rhoR, rhoR_unc, verbose)

def forward_fit_rhoR(data_x, data_y, data_std, dE, chi2_dof, s, E0, E0_unc, fit, fit_unc, verbose):
    return _StopPow.forward_fit_rhoR(data_x, data_y, data_std, dE, chi2_dof, s, E0, E0_unc, fit, fit_unc, verbose)

def deconvolve_fit_rhoR(data_x, data_y, data_std, dE, chi2_dof, s, E0, E0_unc, fit, fit_unc, verbose):
    return _StopPow.deconvolve_fit_rhoR(data_x, data_y, data_std, dE, chi2_dof, s, E0, E0_unc, fit, fit_unc, verbose)

def forward_fit_dEdx(data_x, data_y, data_std, dE, E0, E0_unc, sigma, sigma_unc, rhoR, rhoR_unc, s, chi2_dof, fit, fit_unc, verbose):
    return _StopPow.forward_fit_dEdx(data_x, data_y, data_std, dE, E0, E0_unc, sigma, sigma_unc, rhoR, rhoR_unc, s, chi2_dof, fit, fit_unc, verbose)

PLOT_DEFAULT_NUM_POINTS = cvar.PLOT_DEFAULT_NUM_POINTS

