from unittest import TestCase
from util.Import_WRF_CSV import *

__author__ = 'Alex Zylstra'


class TestWRF_CSV(TestCase):
    """Test the import of analysis program generated CSV files."""

    def test_All(self):
        """Test all of the retrieved data against known values"""
        path = os.path.dirname(__file__)
        file = os.path.join(path, "N130520-002-999_WRF_Pos1_3_13425888_AL_13511794_S1_40x_5hr_ANALYSIS.CSV")
        w = WRF_CSV(file)

        self.assertEqual(w.date, '2013-06-10')
        self.assertEqual(w.time, '08:32')
        self.assertEqual(w.program_date, '2013-06-07')
        self.assertEqual(w.scan_file, 'N130520-002-999_WRF_Pos1_3_13425888_AL_13511794_S1_40x_5hr')
        self.assertEqual(w.port, 'pos1_3')
        self.assertEqual(w.distance, 50)
        self.assertEqual(w.WRF_ID, '13425888-g058')
        self.assertEqual(w.CR39_ID, '13511794')
        self.assertEqual(w.Al_Blast_Filter, 0)
        self.assertEqual(w.WRF_Cal, 'cal13.0225')
        self.assertTupleEqual(w.Data_Limits, (0, 89, 0, 63))
        self.assertTupleEqual(w.BG1_Limits, (0, 13, 0, 63))
        self.assertTupleEqual(w.BG2_Limits, (39, 61, 0, 63))
        self.assertTupleEqual(w.Dia_Limits, (5.61, 16.75))
        self.assertEqual(w.Dia_Auto, True)
        self.assertTupleEqual(w.E_Limits, (1.0, 4.0))
        self.assertEqual(w.c, 1.203)
        self.assertEqual(w.dc, 0.086)
        self.assertEqual(w.chi2, 1.32)
        self.assertTupleEqual(w.Fit_Limits, (7.5, 10.0))
        self.assertTupleEqual(w.Fit, (8.799, 0.573, 4.027e7))
        self.assertTupleEqual(w.Unc_Random, (0.216, 0.027, 10868872.999999998))
        self.assertTupleEqual(w.Unc_Systematic, (0.147, 0, 0))
        self.assertTupleEqual(w.Unc_CountingStats, (0.036, 0.021, 2388011.0))
        self.assertTupleEqual(w.Unc_DvE, (0.091, 0.015, 10522550.999999998))
        self.assertTupleEqual(w.Unc_Dmax, (0.065, 0, 1328910.0))
        self.assertTupleEqual(w.Unc_EtchScan, (0.127, 0.007, 0))
        self.assertTupleEqual(w.Unc_Nonlinearity, (0.020, 0., 0))
        self.assertTupleEqual(w.Unc_CalProc, (0.128, 0, 0))

        # spectrum, just check # rows:
        self.assertEqual(len(w.spectrum), 63)

        # Test file 2:
        file = os.path.join(path, 'N130314-003-999_WRF_Pos1_3_13425867_AL_13511030_S1_40x_5hr_ANALYSIS.csv')
        w = WRF_CSV(file)
        # Test:
        self.assertEqual(w.date, '2013-10-18')
        self.assertEqual(w.time, '11:20')
        self.assertEqual(w.program_date, '2013-10-15')
        self.assertEqual(w.scan_file, 'N130314-003-999_WRF_Pos1_3_13425867_AL_13511030_S1_40x_5hr')
        self.assertEqual(w.port, 'pos1_3')
        self.assertEqual(w.distance, 50)
        self.assertEqual(w.WRF_ID, '13425867-g037')
        self.assertEqual(w.CR39_ID, '13511030')
        self.assertEqual(w.Al_Blast_Filter, 0)
        self.assertEqual(w.WRF_Cal, 'cal12.0417')
        self.assertTupleEqual(w.Data_Limits, (0, 89, 0, 63))
        self.assertTupleEqual(w.BG1_Limits, (39, 61, 0, 63))
        self.assertTupleEqual(w.BG2_Limits, (-1, -1, -1, -1))
        self.assertTupleEqual(w.Dia_Limits, (6.0, 17.49))
        self.assertEqual(w.Dia_Auto, False)
        self.assertTupleEqual(w.E_Limits, (-1, -1))
        self.assertEqual(w.c, 1.233)
        self.assertEqual(w.dc, 0.150)
        self.assertEqual(w.chi2, 0.55)
        self.assertTupleEqual(w.Fit_Limits, (8.0, 11.0))
        self.assertTupleEqual(w.Fit, (9.338,0.605,4.005e+07))
        self.assertTupleEqual(w.Unc_Random, (0.255,0.066,19924875))
        self.assertTupleEqual(w.Unc_Systematic, (0.141,0,0))
        self.assertTupleEqual(w.Unc_CountingStats, (0.059,0.049,3011760.0))
        self.assertTupleEqual(w.Unc_DvE, (0.170, 0.044, 19380195))
        self.assertTupleEqual(w.Unc_FitError, (0., 0., 3324150.0))
        self.assertTupleEqual(w.Unc_Dmax, (0.056, 0, 1109385))
        self.assertTupleEqual(w.Unc_EtchScan, (0.120, 0.007, 0))
        self.assertTupleEqual(w.Unc_Nonlinearity, (0.019, 0, 0))
        self.assertTupleEqual(w.Unc_CalProc, (0.121, 0, 0))

        # Test file 3
        file = os.path.join(path, 'N130313-003-999_WRF_Pos1_3_13425889_AL_13511273_S1_40x_5hr_ANALYSIS.csv')
        w = WRF_CSV(file)
        # Test:
        self.assertEqual(w.date, '2013-10-18')
        self.assertEqual(w.time, '12:49')
        self.assertEqual(w.program_date, '2013-10-15')
        self.assertEqual(w.scan_file, 'N130313-003-999_WRF_Pos1_3_13425889_AL_13511273_S1_40x_5hr')
        self.assertEqual(w.port, 'pos1_3')
        self.assertEqual(w.distance, 50)
        self.assertEqual(w.WRF_ID, '13425889-g059')
        self.assertEqual(w.CR39_ID, '13511273')
        self.assertEqual(w.Al_Blast_Filter, 0)
        self.assertEqual(w.WRF_Cal, 'cal13.0225')
        self.assertTupleEqual(w.Data_Limits, (0, 89, 0, 63))
        self.assertTupleEqual(w.BG1_Limits, (22, 27, 0, 63))
        self.assertTupleEqual(w.BG2_Limits, (50,73,0,63))
        self.assertTupleEqual(w.Dia_Limits, (5.21,16.62))
        self.assertEqual(w.Dia_Auto, True)
        self.assertTupleEqual(w.E_Limits, (1, 4))
        self.assertEqual(w.c, 0.909)
        self.assertEqual(w.dc, 0.127)
        self.assertEqual(w.chi2, 0.27)
        self.assertTupleEqual(w.Fit_Limits, (8.0, 11.0))
        self.assertTupleEqual(w.Fit, (9.492,0.758,1.287e+07))
        self.assertTupleEqual(w.Unc_Random, (0.238,0.068,2487771))
        self.assertTupleEqual(w.Unc_Systematic, (0.139,0,0))
        self.assertTupleEqual(w.Unc_CountingStats, (0.107,0.065,1621620.0))
        self.assertTupleEqual(w.Unc_DvE, (0.129, 0.02, 1581723))
        self.assertTupleEqual(w.Unc_FitError, (0., 0., 1025738.9999999999))
        self.assertTupleEqual(w.Unc_Dmax, (0.016, 0, 100386))
        self.assertTupleEqual(w.Unc_EtchScan, (0.118, 0.007, 0))
        self.assertTupleEqual(w.Unc_Nonlinearity, (0.019, 0, 0))
        self.assertTupleEqual(w.Unc_CalProc, (0.119, 0, 0))

        # Test file 4
        file = os.path.join(path, 'N130314-003-999_WRF_Pos1_3_13425867_AL_13511030_S1_40x_5hr_ANALYSIS_10-18.CSV')
        w = WRF_CSV(file)
        # Test:
        self.assertEqual(w.date, '2013-10-18')
        self.assertEqual(w.time, '14:07')
        self.assertEqual(w.program_date, '2013-10-17')
        self.assertEqual(w.scan_file, 'N130314-003-999_WRF_Pos1_3_13425867_AL_13511030_S1_40x_5hr')
        self.assertEqual(w.port, 'pos1_3')
        self.assertEqual(w.distance, 50)
        self.assertEqual(w.WRF_ID, '13425867-g037')
        self.assertEqual(w.CR39_ID, '13511030')
        self.assertEqual(w.Al_Blast_Filter, 0)
        self.assertEqual(w.WRF_Cal, 'cal12.0417')
        self.assertTupleEqual(w.Data_Limits, (0, 89, 0, 63))
        self.assertTupleEqual(w.BG1_Limits, (39, 61, 0, 63))
        self.assertTupleEqual(w.BG2_Limits, (-1,-1,-1,-1))
        self.assertTupleEqual(w.Dia_Limits, (4.77,16.48))
        self.assertEqual(w.Dia_Auto, True)
        self.assertTupleEqual(w.E_Limits, (1, 4))
        self.assertEqual(w.c, 1.210)
        self.assertEqual(w.dc, 0.007)
        self.assertEqual(w.chi2, 0.53)
        self.assertTupleEqual(w.Fit_Limits, (8.0, 11.0))
        self.assertTupleEqual(w.Fit, (9.396,0.691,3.954e+07))
        self.assertTupleEqual(w.Unc_Random, (0.083,0.149,4151700))
        self.assertTupleEqual(w.Unc_Systematic, (0.070,0,0))
        self.assertTupleEqual(w.Unc_CountingStats, (0.034,0.149,3997494))
        self.assertTupleEqual(w.Unc_DvE, (0.025, 0.010, 1083396))
        self.assertTupleEqual(w.Unc_Dmax, (0.014, 0, 272826))
        self.assertTupleEqual(w.Unc_Nonlinearity, (0.019, 0, 0))
        self.assertTupleEqual(w.Unc_CalProc, (0.068, 0, 0))